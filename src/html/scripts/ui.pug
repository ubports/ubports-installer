script.

  const optionsVal = [
    {id: "channel", type: "select"},
    {id: "wipe", type: "checkbox", note: true},
    {id: "eye-candy", type: "checkbox"},
    {id: "custom-tools", type: "checkbox"},
    {id: "custom-tools-adb", type: "input"},
    {id: "custom-tools-fastboot", type: "input"}
  ];
  const particleViews = ["start", "installing"]
  const viewsExeptions = {
    switch: () => {
      userText.set("install-header", "Ready to switch to ubports");
      $("#btn-inst").text("Switch to UBports");
      $("#switch-note").show();
      show("views", "install");
      userText.set("modal-install-title", "Read before switching!");
      switchHide("modal-install-body", "modal-install-body-switch");
      switchHide("installing-text", "installing-text-switch");
    }
  }

  const id = {
      show: (id) => {
          $("#"+id).show();
      },
      hide: (id) => {
          $("#"+id).hide();
      }
  }

  const switchHide = (from, to) => {
    $("."+from).hide();
    $("."+to).show();
  }

  const hideAll = (id) => {
      $("."+id).hide();
  }
  const showAll = (id) => {
      $("."+id).show();
  }

  const show = (cat, id) => {
      hideAll(cat);
      $("#"+cat+"-"+id).show();
  }

  const setText = (cat, id, text) => {
    $("."+cat+"-"+id).text(text);
  }

  const getValue = (cat, id) => {
    return $("#"+cat+"-"+id).val();
  }

  const views = {
      hideAll: () => hideAll("views"),
      show: id => {
        if ($.inArray(id, particleViews) != -1){
          particles.show();
          $(".ubp-robot").removeClass("ubp-robot-foot")
          $(".ubp-robot").removeClass("ubp-robot-side")
        } else if (id === "done") {
          particles.hide();
          $(".ubp-robot").addClass("ubp-robot-side")
          $(".ubp-robot").removeClass("ubp-robot-foot")
        } else {
          particles.hide();
          $(".ubp-robot").addClass("ubp-robot-foot")
          $(".ubp-robot").removeClass("ubp-robot-side")
        }
        if (viewsExeptions[id]){
          viewsExeptions[id]()
          return;
        }
        show("views", id)
      }
  }

  const userText = {
      set: (id, text) => setText("user", id, text),
      remove: id => setText("user", id, "")
  }

  const header = {
    version_info: {
      set: (text) => {
        return $('#header-text').text('UBports Installer ('+text+')');
      }
    }
  }

  const footer = {
      topText: {
          set: (text) => {
              return $("#device-name").text(text)
          }
      },
      underText: {
          set: (text) => {
              return $("#device-under-text").text(text)
          }
      }
  }

  const modals = {
      bind: modal => {
        $("#btn-modal-"+modal).click(() => {
          $('#'+modal+'-modal').modal('show');
        })
      },
      show: modal => {
        $('#'+modal+'-modal').modal('show');
      },
      hide: modal => {
        $('#'+modal+'-modal').modal('hide');
      }
  }

  const getOptionVal = (option, raw) => {
    var ret = false;
    optionsVal.forEach((optionVal) => {
      if (optionVal.id === option) {
        switch (optionVal.type) {
          case "select":
            ret = raw ? $("#options-" + optionVal.id).find(":selected").val() :
                        $("#options-" + optionVal.id).find(":selected").text();
            break;
          case "checkbox":
            ret = $("#options-" + optionVal.id).is(':checked')
            if (!raw)
              ret = ret ? "Yes" : "No";
            break;
          default:
            console.log("default", optionVal);
            ret = $("#options-" + optionVal.id).val()
            break;
        }
      }
    });
    return ret;
  }

  const optionsValToUser = () => {
    optionsVal.forEach(option => {
      userText.set(option.id, getOptionVal(option.id));
    });
  }

  const options = {
      get: getOptionVal,
      init: () => {
        $("#btn-options-close").click(() => {
          optionsValToUser();
        })
        $("#options-wipe").change(() => {
          if (getOptionVal("wipe", true)) {
            $("#options-wipe-note").show();
            switchHide("modal-install-body-no-wipe", "modal-install-body-wipe");
          } else {
            $("#options-wipe-note").hide();
            switchHide("modal-install-body-wipe", "modal-install-body-no-wipe");
          }
        });
        $("#options-custom-tools").change(() => {
          if (getOptionVal("custom-tools", true)) {
            $("#options-custom-tools-area").show();
          } else {
            $("#options-custom-tools-area").hide();
          }
        });
      },
      optionsValToUser: optionsValToUser
  }

  const particles = {
      show: () => {
          if (getOptionVal("eye-candy", true)) {
              id.show("particles-foreground");
              id.show("particles-background");
          }
      },
      hide: () => {
          id.hide("particles-foreground");
          id.hide("particles-background");
      }
  }
